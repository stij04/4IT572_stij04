- name: Deploy to EC2
  hosts: localhost
  connection: local

  tasks:
    - name: Terminate old EC2 instances
      ec2_instance:
        region: us-east-1
        state: absent
        filters:
          "instance-state-name": "running"

    - name: Launch EC2 instance
      ec2_instance:
        instance_type: t2.medium
        image_id: ami-0230bd60aa48260c6
        region: us-east-1
        key_name: devops
        vpc_subnet_id: subnet-009a359a990b462f1
        network:
            assign_public_ip: yes
        wait: yes
        count: 1
        security_group: eshop
        aws_access_key: "{{ lookup('env', 'ACCESS_KEY') }}"
        aws_secret_key: "{{ lookup('env', 'SECRET_KEY') }}"
        security_token: "{{ lookup('env', 'SESSION_TOKEN') }}"
      register: ec2_instance_result

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.network_interfaces[0].association.public_ip }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"
      when: "'association' in item.network_interfaces[0]"

    - name: Wait for SSH connection
      delegate_to: "{{ item.network_interfaces[0].association.public_dns_name }}"
      wait_for_connection:
        delay: 30
        timeout: 300
      loop: "{{ ec2_instance_result.instances }}"
      when: "'association' in item.network_interfaces[0]"

- name: Configure EC2
  hosts: launched
  remote_user: ec2-user
  connection: ssh

  tasks:
    - name: Install Git and Docker
      yum:
        name:
          - docker
          - git
        state: latest
        update_cache: yes
      become: yes
    - service:
        name: docker
        state: started
        enabled: yes
      become: yes
    - name: Start Docker on startup
      shell: systemctl enable docker
      become: yes
    - name: Set rights to docker
      shell: usermod -a -G docker ec2-user
      become: yes
    - name: Get project files from git
      git:
        repo: 'https://github.com/stij04/4IT572_stij04.git'
        dest: ./app
    - name: Build an image and push it to a private repo
      docker_image:
        build:
          path: ./app
          dockerfile: Dockerfile
        name: myeshop
        tag: latest
        source: build
      become: yes
    - name: Run Docker with eshop
      shell: docker container run -p 80:3000 myeshop
      async: 45
      poll: 0
      become: yes
    - wait_for:
        port:
          80
